The ``say_my_name`` module
======================

Using `say_my_name``
-------------------

Importing the function from the module:
	>>> say_my_name = __import__("3-say_my_name").say_my_name

Checking for module docstring:
	 >>> m = __import__("3-say_my_name").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("3-say_my_name").say_my_name.__doc__
         >>> len(f) > 1
         True

Checking for PEP8:
	 >>> import os
	 >>> os.popen("pep8 3-say_my_name.py").read()
	 ''

Checking for last blank line:
	 >>> os.popen("cat -e 3-say_my_name.py | tail -1").read()[-1]
	 '\n'

Checking for passing None as first name:
	 >>> say_my_name(None, "Python")
	 Traceback (most recent call last):
	 ...
	 TypeError: first_name must be a string

Checking for passing None as last name:
	 >>> say_my_name("Python", None)
	 Traceback (most recent call last):
	 ...
	 TypeError: last_name must be a string

Checking for wrong type as first name:
    >>> say_my_name(1, "Python")
    Traceback (most recent call last):
    ...
    TypeError: first_name must be a string

Checking for wrong type as last name:
    >>> say_my_name("Monty", [4])
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

Checking for normal use:
	 >>> say_my_name("Monty", "Python")
	 My name is Monty Python

Checking for 1 arg:
	 >>> say_my_name("Monty")
	 My name is Monty 

Checking for both empty string parameters:
	 >>> say_my_name("", "Python")
	 My name is  Python

Checking for more empty string as first name:
	 >>> say_my_name("", "")
	 My name is  
